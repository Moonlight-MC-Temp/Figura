plugins {
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "figura-common.mixins.json"
        mixinConfig "figura.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    mappings loom.layered {
        mappings(file("$rootProject.projectDir/mappings/gecko-mojmap-fix.tiny"))
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-1.16.5:2022.03.06@zip")
    }

    shadowCommon(implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.6")))

    // Libraries
    shadowCommon(forgeRuntimeLibrary("com.github.FiguraMC.luaj:luaj-core:$luaj-figura"))
    shadowCommon(forgeRuntimeLibrary("com.github.FiguraMC.luaj:luaj-jse:$luaj-figura"))
    shadowCommon(forgeRuntimeLibrary("com.neovisionaries:nv-websocket-client:$nv_websocket"))

    forge "net.minecraftforge:forge:${rootProject.forge_version}"

    if (rootProject.run_with_geckolib == "true") {
        modImplementation("software.bernie.geckolib:geckolib-forge-$geckolib_version_forge")
    } else {
        modCompileOnly("software.bernie.geckolib:geckolib-forge-$geckolib_version_forge")
    }
    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
   Map<String, Object> properties = new HashMap<>()

    properties.put("version", project.jarVersion)
    properties.put("java_version", rootProject.java_version)
    properties.put("minecraft_version", rootProject.minecraft_version)
    properties.put("assets_version", rootProject.assets_version)

    properties.forEach((k, v) -> inputs.property(k, v.toString()))
    filesMatching("META-INF/mods.toml") {
        expand properties
    }
}

shadowJar {
    exclude "fabric.mod.json"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier.set "dev-shadow"
    relocate 'org.apache.bcel', "${project.group}.org.apache.bcel"
    relocate 'org.apache.commons.lang3', "${project.group}.org.apache.commons.lang3"
    relocate 'com.neovisionaries', "${project.group}.com.neovisionaries"
    relocate 'com.llamalad7.mixinextras', "${project.group}.com.llamalad7.mixinextras"
    mergeServiceFiles() // Very important!
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier.set "forge-mc"
}

jar {
    archiveClassifier.set "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "${project.archivesBaseName}-${project.name}"
            version = project.version
            artifact(remapJar) {
                builtBy remapJar
                classifier ''
            }
            artifact(sourcesJar) {
                builtBy sourcesJar
                classifier 'sources'
            }
        }
    }
    setupRepositories(repositories)
}

void setupRepositories(RepositoryHandler repositories) {
    if (project.hasProperty("mavenUrl")) {
        repositories.maven {
            name = "figuraMaven"
            url project.mavenUrl
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}
